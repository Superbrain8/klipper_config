#Mainsail Settings
[include mainsail.cfg]
[include rgb.cfg]
#[include crampon.cfg]

# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: z:ar10)

# |------------------------|
# |        BACKPACK        |
# |------------------------|
# | Y  |    | Z1 |    | X1 |
# |-----    ------    -----|
# |                        |
# | ------          ------ |
# | | Z  |          | Z2 | |
# | ------          ------ |
# |-----              -----|
# | X  |              | Y1 |
# |------------------------|


[mcu]
#make sure this reflects your serial port you found when flashing klipper
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_5F003D001851303439363932-if00
#restart_method: command

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[mcu supernova]
serial: /dev/serial/by-id/usb-Klipper_rp2040_E6605481DB85AE37-if00

[output_pin power_LED]
pin: supernova:gpio25
value: 1

#[mcu host]
#serial: /tmp/klipper_host_mcu

#[temperature_sensor supernova_temp]
#sensor_type: supernova:temperature_mcu
#min_temp: 0
#max_temp: 100

#enable display status for moonraker
[display_status]

# Enable Pause/Resume Functionality
[pause_resume]


[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 10000
max_accel_to_decel: 10000
max_z_velocity: 20
max_z_accel: 100
square_corner_velocity: 20 

#Gcode G2/G3 Arc Support
[gcode_arcs]
resolution: 0.1


#Input Shaper Settings
# you need to tune your printer for this
# [input_shaper]
# shaper_freq_x:
# shaper_freq_y:
# shaper_type: mzv

[stepper_z] #X
step_pin: PE11
dir_pin: !PE10
enable_pin: !PE9

# 5:1 Belted Z attached to a 1.8deg Motor
rotation_distance: 40
gear_ratio: 5:1
microsteps: 16
full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor

# connected to Z- Endstop on S6
endstop_pin: probe:z_virtual_endstop
position_max: 170 #this is set here on purpose, your actual travel will vary based on spring compression holding the bed, adjust at your own risk
position_min: -7
homing_speed: 15.0
second_homing_speed: 5.0
homing_retract_dist: 10.0
homing_positive_dir: false


[stepper_z1] #Y
step_pin: PD8
dir_pin: !PB12
enable_pin: !PD9

# 5:1 Belted Z attached to a 1.8deg Motor
rotation_distance: 40
gear_ratio: 5:1
microsteps: 16
full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor

[stepper_z2] # Z
step_pin: PD14
dir_pin: PD13
enable_pin: !PD15

# 5:1 Belted Z attached to a 1.8deg Motor
rotation_distance: 40
gear_ratio: 5:1
microsteps: 16
full_steps_per_rotation: 200 #change to 400 for a 0.9deg motor

[stepper_x]
# connected to Stepper #1 on Supernova
step_pin: supernova:gpio2
dir_pin: supernova:gpio1
enable_pin: !supernova:gpio3
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc5160_stepper_x:virtual_endstop 
position_min: -8
position_endstop: 180
position_max: 180
homing_speed: 60.0
homing_retract_dist: 0.0
homing_positive_dir: true
 
[stepper_x1]
# connected to Stepper #2 on Supernova
step_pin: supernova:gpio5
dir_pin: !supernova:gpio4
enable_pin: !supernova:gpio6
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc5160_stepper_x1:virtual_endstop 


[stepper_y]
# connected to Stepper #3 on Supernova
step_pin: supernova:gpio11
dir_pin: !supernova:gpio10
enable_pin: !supernova:gpio12
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc5160_stepper_y:virtual_endstop
position_min: -2
position_endstop: -2
position_max: 184
homing_speed: 60.0
homing_retract_dist: 0.0
homing_positive_dir: false 

[stepper_y1]
# connected to Stepper #4 on Supernova
step_pin: supernova:gpio14
dir_pin: supernova:gpio13
enable_pin: !supernova:gpio15
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc5160_stepper_y1:virtual_endstop 


#TMC Stepper Driver Settings
[tmc5160 stepper_x]
# connected to Stepper #1 on Supernova
cs_pin: supernova:gpio26
spi_bus: spi0c
diag1_pin: ^!supernova:gpio0
interpolate: true
run_current: 1.4
sense_resistor: 0.075
driver_SGT: -1 # -64 is most sensitive value, 63 is least sensitive

[tmc5160 stepper_x1]
# connected to Stepper #2 on Supernova
cs_pin: supernova:gpio22
spi_bus: spi0c
diag1_pin: ^!supernova:gpio7
stealthchop_threshold: 0
interpolate: true
run_current: 1.4
sense_resistor: 0.075
driver_SGT: -1 # -64 is most sensitive value, 63 is least sensitive


[tmc5160 stepper_y]
# connected to Stepper #3 on Supernova
cs_pin: supernova:gpio21
spi_bus: spi0c
diag1_pin: ^!supernova:gpio9
stealthchop_threshold: 0
interpolate: true
run_current: 1.4
sense_resistor: 0.075
driver_SGT: -1 # -64 is most sensitive value, 63 is least sensitive

[tmc5160 stepper_y1]
# connected to Stepper #4 on Supernova
cs_pin: supernova:gpio20
spi_bus: spi0c
diag1_pin: ^!supernova:gpio8
stealthchop_threshold: 0
interpolate: true
run_current: 1.4
sense_resistor: 0.075
driver_SGT: -1 # -64 is most sensitive value, 63 is least sensitive

[tmc2209 stepper_z]
# connected to X Stepper on S6
uart_pin: PE8
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z1]
# connected to Y Stepper on S6
uart_pin: PC4
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0

[tmc2209 stepper_z2]
# connected to Z Stepper on S6
uart_pin: PD12
interpolate: true
run_current: 1.0 
sense_resistor: 0.110
stealthchop_threshold: 0




[extruder] #E0
step_pin: PD5
dir_pin: !PD6
enable_pin: !PD4
rotation_distance: 17.3991 #for 5mm Shaft Driven Bondtech gearsets
gear_ratio: 5:1 #Sherpa Mini 10t uses 5:1 or 8t uses 50:8, Folded Ascender Use 40:1 or 20:1
microsteps: 16
full_steps_per_rotation: 200 #1.8 deg motor

#hotend
heater_pin: PB3
sensor_type: PT1000
sensor_pin: PC0
pullup_resistor: 4700
min_extrude_temp: 190
min_temp: 5
max_temp: 500
max_extrude_only_distance: 500
max_extrude_cross_section: 2.0
#smooth_time: 0.3
#control:pid


#0.5mm Nozzle
nozzle_diameter: 0.500
#pressure_advance: 0.035
#pressure_advance_smooth_time: 0.040
filament_diameter: 1.750	
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 120.0
max_extrude_only_accel: 1500.0
max_extrude_cross_section: 20000.0

[tmc2209 extruder]
# connected to E0 Stepper on S6
uart_pin: PA15
interpolate: true
run_current: 0.3 
sense_resistor: 0.110
stealthchop_threshold: 0

# Dockable Probe
[dockable_probe]
# connected to Z- Endstop on S6
pin: ^PA0
x_offset: -25.0 # offset for microswitch x direction off nozzle
y_offset: -1.95 # offset for microswitch y direction off nozzle
#z_offset: 5.06 # offset for microswitch in z height - this is a starting point only
samples: 3
sample_retract_dist: 5
samples_result: median
samples_tolerance: 0.02
samples_tolerance_retries: 3
speed: 3
lift_speed: 15

# annexed probe specific
dock_position:             -8,179.5,20 #back left corner of gantry
approach_position:         32,179.5,20
detach_position:           -8,141,20
safe_z_position:           90,90 #center of bed
attach_speed:              20
detach_speed:              100
travel_speed:              300
check_open_attach:         True
dock_fixed_z:              True
dock_retries:			   1

#   Optional custom gcode sections for annexed probe
pre_attach_gcode:
    G1 X40 Y40 F18000    #keep umbilical from catching on stuff
pre_detach_gcode:
    G1 X40 Y40 F18000   #keep umbilical from catching on stuff
    
post_attach_gcode:
    G1 X40 Y181 F18000   # Exit the probe dock before continuing (no more probes in the purge bucket)
post_detach_gcode:
    G1 X40 Y181 F18000   # After detaching, return to reasonable position


#Raspberry Pi Temperature Sensor
[temperature_sensor pi_cpu]
sensor_type: temperature_host
gcode_id: P

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PC1

[heater_bed]
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC3  
smooth_time: 3.0
max_power: 0.5
min_temp: 5
max_temp: 140

[fan]
pin: PB0
kick_start_time: 0.500

[heater_fan hotend_fan]
pin:PB1
heater: extruder
heater_temp: 60.0
fan_speed: 1.0

[fan_generic rebreather]
pin: PB13
off_below: 0.12
cycle_time: 0.020
kick_start_time: 0.500
tachometer_pin: PA14
tachometer_poll_interval: 0.0015

[heater_fan ebox]
pin: PB2
fan_speed: 0.3
heater: heater_bed
heater_temp: 30.0
cycle_time: 0.02
kick_start_time: 0.500

[filament_switch_sensor filament_sensor] #X Max
switch_pin: ^!PA1


# Mesh Bed Settings
[bed_mesh]
speed: 200
horizontal_move_z: 12
mesh_min: 20,25
mesh_max: 150, 155
probe_count: 5,5
fade_start: 0.5
fade_end: 2
split_delta_z: .025
move_check_distance: 5.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.1
relative_reference_index: 12  # ^^^because were measuring the offset from the nozzle switch to the bed using the center of the bed, the equation to find the location = (probe point count)/2-1

# Z Tilt Bed Adjustment settings
[z_tilt]
#3 Z Motors
z_positions: 
    -74.0, -18.0    # Front Left
    76.0,  217.0    # Rear
    226.0, -18.0    # Front Right
points:
    45, 25          # Front Left
    114, 160        # Rear
    175, 25         # Front Right
speed: 200
horizontal_move_z: 20.0
retries: 4
retry_tolerance: 0.01


# Motor and Heater Idle Timeout
[idle_timeout]
timeout: 6000


#	Macros
#	pre-print-prep macro

#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro g32]
gcode:
    Z_TILT_ADJUST	;adjust bed so its square to gantry

#	mesh bed level the machine
[gcode_macro mesh_bed_level_machine]
gcode:
    BED_MESH_CALIBRATE	;Run Bed Mesh

[gcode_macro print_start]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
    {% set BED = params.BED|default(110) %}
    {% set CHAMBER = params.CHAMBER_TARGET|default(0) %}

    print_start_1		;print start macro 1
    M140 S{BED}			;set bed temperature and wait
    heat_chamber TEMP={BED} CTEMP={CHAMBER}
    Z_TILT_ADJUST 
    M109 S{EXTRUDER}		;set hotend temperature and wait
    M190 S{BED}			;set bed temperature and do not wait
    prime_line_regular	;draw prime line in corner of bed
    SET_FAN_SPEED FAN=rebreather SPEED=0.6
    wled_on

[gcode_macro print_start_1]
gcode:
    M104 S0 #cancel set temp
    M107 #turn cooling fans off
    G21  # set units to mm
    G90  # use absolute coordinates
    M83	# use relative extrusion
    G92 E0.0  # reset e count
    M220 S100 # reset speed multiplier


    
[gcode_macro prime_line_regular]
gcode:
    G1 Z20 F6000
    G1 X10 Y10 F12000
    G1 Z0.5 F600
    G1 Y105 E10 F1000
    G1 Y115 E2.5 F1000
    G92 E0.0             ;set extruder to Zero
    G92 Z0.5             ;let printer know its at 0.5
    G90                  ;set to absolute

#    Use print_end for your slicer ending script 
[gcode_macro print_end]
variable_x_retract:         2       # distance to move x on initial move away from print
variable_y_retract:         2       # distance to move y on initial move away from print
variable_z_retract:         1       # distance to lift z on initial move away from print
variable_z_min:             130     # minimum z height to end at
variable_z_lift:            10      # minimum distance to lift z on final move
variable_x_end:             160     # x position to end at
variable_y_end:             180     # y position to end at
variable_heatbed_off:       True    # whether or not to turn off heatbed
variable_motors_off:        True    # whether or not to turn off motors
gcode:
    {% set x_mid = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_mid = printer.toolhead.axis_maximum.y / 2 %}
    {% set z_max = printer.toolhead.axis_maximum.z %}

    # get x retract distance
    {% if printer.toolhead.position.x < x_mid %}
        {% set x_dist = x_retract|abs %}
    {% else %}
        {% set x_dist = -(x_retract|abs) %}
    {% endif %}
    
    # get y retract distance
    {% if printer.toolhead.position.y < y_mid %}
        {% set y_dist = y_retract|abs %}
    {% else %}
        {% set y_dist = -(y_retract|abs) %}
    {% endif %}
    
    # get z retract distance
    {% if printer.toolhead.position.z + z_retract < z_max %}
        {% set z_dist = z_retract %}
    {% else %}
        {% set z_dist = z_max - printer.toolhead.position.z %}
    {% endif %}

    SAVE_GCODE_STATE NAME=END_state

    # disengage from print
    M83                                     # relative extrusion
    G91                                     # relative positioning
    G1 E-0.3 F4800                          # retract 0.3mm of filament
    G1 X{x_dist} Y{y_dist} Z{z_dist} F6000  # short quick move to disengage from print
    G90                                     # absolute positioning


    M104 S0                 # turn off hotend
    {% if heatbed_off %}
        M140 S0             # turn off heatbed
    {% endif %}

    # move to x and y ending positions
    G1 X{x_end} Y{y_end}

    # move to z ending position
    {% if printer.toolhead.position.z + z_lift < z_min %}
        G1 Z{z_min}
    {% elif printer.toolhead.position.z + z_lift < z_max %}
        G91
        G1 Z{z_lift}
        G90
    {% else %}
        G1 Z{z_max}
    {% endif %}

    RESTORE_GCODE_STATE NAME=END_state

    M107                    # turn off part cooling fans
    {% if motors_off %}
        M84                 # turn off motors
    {% endif %}
    CLEAR_PAUSE             # clear pause state in case it was enabled

    SET_FAN_SPEED FAN=rebreather SPEED=0

    wled_done               # Print done Light Notification

#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    print_end #execute the print end macro
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT


#	Set Temps for chamber warmup
[gcode_macro heat_chamber]
# params:
    # TEMP
gcode:
    {% set TEMP = params.TEMP|default(110) %}
    {% set CTEMP = params.CTEMP|default(45) %}

    M106 S255					#turn part cooling fan on to blow heat around chamber
    M190 S{TEMP}				#set bed temperature and wait
    G28							#home machine
    G0 X90 Y90 Z20 F3000		#move to center of bed
    wled_preheat
    SET_FAN_SPEED FAN=rebreather SPEED=0.6
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CTEMP}
    M106 S0	                    #Turn off partcooling
   

#	Notify when filament is unloaded and ready to reload
[delayed_gcode notify_extruder_reload]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin Ready to Load Filament")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Load Filament
[gcode_macro load_filament]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
		
    G0 X10 Y40 F18000		#move to area where can easily load filament
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
        #do nothing
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z50 F600     #move z to 50mm
    {% endif %}
    M109 S{EXTRUDER}		#set hotend temperature and wait
    M83						#relative positioning on extruder	
    G0 E120 F400  			#prime extruder
    M109 S0					#turn off extruder
    UPDATE_DELAYED_GCODE ID=notify_extruder_load DURATION=10

#	Notify when filament is loaded
[delayed_gcode notify_extruder_load]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin FIlament is Loaded")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Unload Filament
[gcode_macro unload_filament]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}

    G0 X10 Y40 F18000		#move to area where can easily load filament
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
        #do nothing
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z50 F600     #move z to 50mm
    {% endif %}
    M109 S{EXTRUDER}		#set hotend temperature and wait	
    M83						#relative positioning on extruder
    G0 E5 F400			#extrude filament to get better blob on end
    G0 E-600 F1800  		#retract additional filament to move out of melt zone
    UPDATE_DELAYED_GCODE ID=notify_extruder_reload DURATION=10

[gcode_macro M600]
# params:
#   X
#   Y
#   Z
gcode:
    {% set X = params.X|default(40) %}
    {% set Y = params.Y|default(40) %}
    {% set Z = params.Z|default(10) %}

    {% if printer.toolhead.status == "Ready" %}
        # do nothing
    {% else %}
        M117 Filament Change
        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-5 F4000
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F3000
        G0 E15 F1800			#extrude filament to get better blob on end
        G0 E-500 F4800  		#retract additional filament to move out of melt zone
        RESTORE_GCODE_STATE NAME=M600_state
    {% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode:
    M117 Printing...
    LOAD_FILAMENT
    RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode:
    M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
variable_ratio: 1.0     # ratio of accel_to_decel/accel
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float * ratio }

[gcode_macro attach_probe_to_toolhead]
gcode:
    ATTACH_PROBE
    
#	Macro to Detach the Magnetic Probe
[gcode_macro detach_probe_from_toolhead]
gcode:
    DETACH_PROBE

[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 24.696
#*# pid_ki = 1.339
#*# pid_kd = 113.909
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 26.871
#*# pid_ki = 1.179
#*# pid_kd = 153.164
#*#
#*# [dockable_probe]
#*# z_offset = 10.720
